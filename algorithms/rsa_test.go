package algorithms

import (
	"testing"

	"github.com/stretchr/testify/require"
)

// generated by: openssl genrsa -out rsa4096.key 4096
var testRSAPrivateKey = `
-----BEGIN RSA PRIVATE KEY-----
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
-----END RSA PRIVATE KEY-----`

// generated by: openssl rsa -in rsa4096.key -outform PEM -pubout -out rsa4096.key.pub
var testRSAPublicKey = `
-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAzxAPPIg61C4Y3Fdagyvd
QiPN7dV4A725Rl01D9u05L4Nz7rEY+uZYNTI0OHiTIvac/Ze0NkZriTwIzHLa2B9
hMB/Y/UX9yzpia9FRG6u3QbVt7G76dftuw7mXHj4b2zFQSPDO2bsKWxQHhpA5YlO
UnSZqtC0/YsC+72UDYct/5InVQbHYe3o1FcCgwkwWGZ6h5n0lFkS3zuw0zOQfFzu
1Ylsw+VjqsvG9q11rUiy088XmvvUynvAgKxbSjeJNzMGmRwFOK4IbLcBx8aOy0jk
/2EQO+p8fn9bVzZHAfOYPkaLITyjJy3JhsA6TaH+5JXHOpNUW+FC1dMmXvc+STqy
q/wSCCqs8v9UAvYpZz5Pkgen2XuD1Ucpq4HB38b7MySxdmuQbHmke1GyiAKn58DU
2IdDLBiqwUj55upDuUiHqUNcs2x/40lS1CPx4QMg/093vwyp5bKPrXKCd63rIQit
I5RD5dEe2jEWVpXIyJbIgb7V8A3Nd1JiAGRDX0At9+zoNMaMis4zzIafXCngicz1
BsemwZzpfeTSmrskDawuFsDgV+kqGGubWNAcclgRhTJUIPgr6WBniZ2vEU/5Ovb+
5L/9tSeiHPlvcVUexe91uG4fuljqs6HuhF2JULyD/PJCJ6NK5B19pSUlZykFZzsn
2nKBErgh/h04WIjBnhZV3jkCAwEAAQ==
-----END PUBLIC KEY-----`

func TestRS256Sign(t *testing.T) {
	data := "data"
	expected := []byte{
		0x60, 0x88, 0x9b, 0xf4, 0x46, 0x3f, 0x91, 0x9b, 0xad, 0x9f, 0x97, 0xb8, 0x9a, 0x8f, 0x31, 0x01,
		0x18, 0xe5, 0xcf, 0xfa, 0x42, 0x2a, 0x3a, 0xf1, 0x9d, 0x39, 0x83, 0x9d, 0xf1, 0x63, 0x99, 0x4f,
		0x45, 0xf5, 0x5a, 0x92, 0x40, 0xe1, 0x71, 0x3d, 0x7f, 0xcd, 0xdb, 0xbd, 0x6f, 0xf9, 0x1a, 0xd3,
		0x91, 0x75, 0x8a, 0x1f, 0xe9, 0x1a, 0xa7, 0x8d, 0xa1, 0xf9, 0xa0, 0xf3, 0xa6, 0x93, 0xcd, 0x99,
		0x0e, 0x03, 0xae, 0x65, 0xec, 0x4f, 0x42, 0x11, 0xe4, 0x3f, 0x99, 0xcd, 0xfb, 0xab, 0x93, 0xd1,
		0x0f, 0xf7, 0x2b, 0x0d, 0x62, 0x4e, 0xc3, 0xca, 0x67, 0x15, 0x5b, 0x6d, 0xa5, 0x44, 0x7a, 0x28,
		0x51, 0x77, 0xbc, 0xdc, 0xb9, 0x5d, 0xfb, 0x90, 0x9d, 0xe8, 0xf2, 0xa3, 0x2c, 0x24, 0x8a, 0x29,
		0xfb, 0xca, 0xd1, 0xa6, 0x7e, 0x89, 0x59, 0xce, 0x39, 0x5c, 0x6a, 0x25, 0xb6, 0x44, 0x31, 0xa3,
		0x77, 0x7c, 0x80, 0x30, 0x31, 0x9b, 0x37, 0x23, 0xea, 0xd0, 0xa6, 0x81, 0x48, 0x0f, 0x32, 0xd5,
		0xab, 0x3a, 0x19, 0x6b, 0x88, 0xd0, 0x53, 0x4a, 0xb4, 0x68, 0x80, 0xf6, 0x08, 0x14, 0x0a, 0xfd,
		0x36, 0x71, 0xf8, 0xf9, 0x44, 0xce, 0xf3, 0x3f, 0x24, 0x4b, 0x37, 0xc9, 0x0c, 0xc0, 0xe1, 0xc2,
		0xd3, 0xa4, 0xf7, 0x1c, 0xd7, 0x9d, 0xfb, 0x7d, 0x7d, 0x49, 0x45, 0x27, 0x3d, 0xa3, 0x4a, 0xc1,
		0x12, 0x81, 0x8f, 0x37, 0xf8, 0x27, 0x43, 0xe6, 0xbd, 0xd8, 0x68, 0xec, 0x54, 0xa9, 0x40, 0x92,
		0xe6, 0xee, 0x90, 0xbe, 0x8c, 0x18, 0xb3, 0x5d, 0x8e, 0x94, 0x6c, 0xb1, 0x0b, 0x49, 0xac, 0xf7,
		0x78, 0x3a, 0xfb, 0x22, 0x07, 0x99, 0x26, 0x80, 0xa4, 0x95, 0x18, 0x95, 0x36, 0x59, 0x5a, 0x6a,
		0xc2, 0xa4, 0x8f, 0x4f, 0xa1, 0xc3, 0x18, 0xf4, 0x7f, 0xc1, 0x28, 0x1c, 0x58, 0xb0, 0xa2, 0xe5,
		0x09, 0x16, 0x12, 0x7d, 0xa7, 0xbc, 0x79, 0x29, 0x93, 0x3c, 0x0b, 0x08, 0x1f, 0xf9, 0xf8, 0xc0,
		0x4b, 0x96, 0xe6, 0x8e, 0xc9, 0x12, 0x62, 0xbc, 0x24, 0x49, 0x7e, 0x04, 0xe9, 0x31, 0x9e, 0xb9,
		0x2d, 0x50, 0x54, 0xb1, 0x1c, 0xba, 0xb5, 0x91, 0xb8, 0x7b, 0xc5, 0x3e, 0x26, 0xcf, 0xad, 0xdb,
		0x3a, 0x61, 0x50, 0x7d, 0xe3, 0x18, 0xfa, 0x05, 0x37, 0xf5, 0x8c, 0x46, 0x81, 0x30, 0x66, 0x39,
		0x13, 0xdc, 0x63, 0x9b, 0x46, 0x10, 0xc2, 0x18, 0xbf, 0x58, 0x6c, 0x2e, 0x6b, 0x2f, 0x99, 0x51,
		0x9b, 0x75, 0xc1, 0x6f, 0x5a, 0x4a, 0xd1, 0x82, 0x19, 0xec, 0x7a, 0x4d, 0x6b, 0xe1, 0xe3, 0x6d,
		0xfb, 0x99, 0x54, 0x00, 0x10, 0x0b, 0xc7, 0x65, 0x50, 0xd0, 0x45, 0xa6, 0x0a, 0x63, 0xbb, 0xce,
		0x02, 0x82, 0x4f, 0x51, 0x86, 0xf2, 0xbb, 0x20, 0xbf, 0x06, 0xf8, 0x7d, 0x6d, 0x77, 0xac, 0x55,
		0x3b, 0xef, 0xd7, 0x35, 0xf3, 0xf4, 0x8e, 0xf0, 0x95, 0x92, 0xd0, 0x41, 0x5e, 0x76, 0x05, 0x97,
		0x1d, 0xda, 0xad, 0xdf, 0xf0, 0x0d, 0xeb, 0x76, 0x88, 0x5a, 0xe3, 0xf9, 0x88, 0xa2, 0xbd, 0x22,
		0x1a, 0xfc, 0x53, 0x2a, 0x06, 0x67, 0x30, 0xdd, 0x8a, 0x64, 0xad, 0x3e, 0x8d, 0xe4, 0x7a, 0xf4,
		0xf0, 0x92, 0xb9, 0x46, 0x00, 0xf3, 0x87, 0x80, 0x79, 0x56, 0xa8, 0x4d, 0xb0, 0x1e, 0x65, 0x5d,
		0xef, 0x70, 0x61, 0xd1, 0x68, 0xe4, 0x1f, 0x2b, 0x16, 0xf6, 0x50, 0x21, 0x90, 0xcc, 0xc9, 0x9b,
		0x91, 0x3b, 0x2a, 0xe8, 0x54, 0x40, 0xfa, 0xfe, 0xec, 0x36, 0xb8, 0xff, 0x34, 0x7f, 0x94, 0x13,
		0x55, 0x36, 0xce, 0x1c, 0xfd, 0x7b, 0x57, 0x22, 0xa6, 0x49, 0xff, 0xbf, 0xac, 0x28, 0x8b, 0x85,
		0xf7, 0x37, 0xb4, 0x80, 0x5d, 0xdf, 0xb7, 0x2a, 0x50, 0x4e, 0xbb, 0xf9, 0x96, 0x86, 0x55, 0x87,
	}
	actual, err := AlgorithmRS256.Sign(data, []byte(testRSAPrivateKey))
	require.Nil(t, err)
	require.Equal(t, expected, actual)
}

func TestRS384Sign(t *testing.T) {
	data := "data"
	expected := []byte{
		0x87, 0xce, 0x64, 0x93, 0x6e, 0xf7, 0x15, 0x11, 0xa4, 0x8c, 0xb4, 0xce, 0x90, 0x9d, 0xd0, 0x8d,
		0x69, 0x44, 0xae, 0x8a, 0xd3, 0xc5, 0xc9, 0xc3, 0x05, 0xaf, 0x21, 0xf8, 0xbd, 0xc8, 0x19, 0xbb,
		0x01, 0x20, 0x78, 0x2d, 0xef, 0x6d, 0x07, 0x86, 0x56, 0x20, 0x4d, 0x78, 0xa8, 0x48, 0xe4, 0x59,
		0x5c, 0x70, 0x60, 0x31, 0x19, 0x0d, 0xb0, 0x27, 0xaf, 0xfe, 0x42, 0xd9, 0xe6, 0x00, 0xdb, 0xc6,
		0x80, 0x49, 0x97, 0xa1, 0x4c, 0x54, 0x78, 0x8d, 0x92, 0x62, 0xf6, 0xfb, 0xc7, 0xdf, 0x49, 0x0b,
		0xfd, 0xa3, 0x68, 0x7c, 0x09, 0xd1, 0x05, 0x83, 0x47, 0x14, 0xd3, 0xaa, 0x39, 0xb6, 0xbd, 0x9a,
		0xec, 0x64, 0xa7, 0xf7, 0x91, 0xc6, 0x4b, 0xe3, 0xf2, 0x65, 0x20, 0x5e, 0xc6, 0x75, 0x11, 0x2d,
		0x73, 0xae, 0xa6, 0xc6, 0x2a, 0x73, 0x40, 0xca, 0xee, 0xe7, 0x69, 0xef, 0x4c, 0x05, 0xe6, 0xf1,
		0xfa, 0xb4, 0xfd, 0xcf, 0xa4, 0x52, 0xaf, 0x6f, 0x4b, 0x63, 0x1d, 0xbc, 0x6e, 0x8f, 0x41, 0x3d,
		0xdc, 0xe6, 0x5e, 0xc9, 0x21, 0xa3, 0x66, 0xef, 0x38, 0xc9, 0xd4, 0xd6, 0x7c, 0x1a, 0xeb, 0xd4,
		0x07, 0xaa, 0xd9, 0x12, 0xb1, 0x9d, 0x83, 0x8d, 0x8d, 0x44, 0xdb, 0xa4, 0xbf, 0x05, 0x88, 0x8c,
		0xbd, 0x29, 0x52, 0xdf, 0x5b, 0xea, 0xb4, 0xe3, 0x36, 0xb7, 0xe7, 0x32, 0x2a, 0xe6, 0x2e, 0x78,
		0x61, 0xb9, 0xa8, 0x88, 0xd2, 0xd6, 0xbc, 0x21, 0x94, 0xe0, 0x37, 0xab, 0x78, 0xb3, 0x7d, 0x3b,
		0xd1, 0xba, 0x18, 0xeb, 0x60, 0xe3, 0x69, 0x1b, 0x51, 0xf1, 0xe4, 0xbd, 0x58, 0xdc, 0x03, 0x30,
		0xac, 0x1d, 0x82, 0x35, 0x5a, 0x0c, 0x56, 0xa3, 0x71, 0xf4, 0x67, 0xe0, 0xa0, 0xe6, 0x69, 0x05,
		0xdd, 0xb8, 0x76, 0x95, 0xb0, 0x3c, 0xc7, 0xbd, 0x45, 0x9e, 0x7a, 0x61, 0x7f, 0x68, 0xa7, 0xa2,
		0x1e, 0xc2, 0xf1, 0x20, 0x4c, 0xe8, 0x14, 0x01, 0x51, 0xc3, 0x90, 0x2f, 0xd0, 0x82, 0xe6, 0x38,
		0xbd, 0xbf, 0x59, 0x3a, 0x1b, 0xb9, 0x14, 0x16, 0xdc, 0x76, 0x0b, 0xda, 0x29, 0x5e, 0x8a, 0x31,
		0xf6, 0x9e, 0xb6, 0x4e, 0x79, 0xa2, 0xf0, 0xda, 0xc3, 0xdb, 0xda, 0x2d, 0x5c, 0xeb, 0x00, 0x3c,
		0xef, 0x74, 0xcf, 0xce, 0xf2, 0xfc, 0xba, 0x03, 0x60, 0xfb, 0xd8, 0x21, 0x3d, 0x56, 0x1b, 0x64,
		0xa0, 0xf1, 0x94, 0xbb, 0xb8, 0x6e, 0x01, 0x33, 0xa0, 0x03, 0xcb, 0x34, 0x2f, 0xd3, 0x59, 0xc2,
		0x32, 0x0a, 0x0c, 0xdd, 0xd4, 0xd5, 0x1a, 0x81, 0x1d, 0x51, 0x95, 0x9a, 0x3c, 0xcf, 0xc1, 0x6f,
		0x68, 0x7f, 0xfa, 0xc1, 0x34, 0x5f, 0x3a, 0x55, 0xb1, 0xfc, 0xf5, 0x46, 0xff, 0x08, 0xe8, 0x92,
		0x0a, 0x6f, 0x71, 0xcd, 0x1d, 0x66, 0x3c, 0x57, 0x5b, 0xd0, 0xaf, 0x61, 0x13, 0xac, 0xa4, 0xa4,
		0x56, 0x6b, 0x3e, 0x49, 0x99, 0x79, 0x06, 0x4b, 0xd9, 0x6f, 0x1b, 0xd3, 0xca, 0xab, 0xdf, 0x81,
		0x79, 0x59, 0x1e, 0x6f, 0x48, 0xfd, 0x4e, 0xca, 0xb1, 0xdc, 0x98, 0x35, 0xfe, 0xfe, 0x2e, 0x6e,
		0xc5, 0xf2, 0x42, 0x32, 0x3f, 0x30, 0x4b, 0x39, 0x35, 0x5b, 0xb6, 0x6f, 0x24, 0x94, 0x50, 0x70,
		0x7b, 0x8e, 0xd1, 0x1e, 0xaf, 0xef, 0x23, 0x34, 0xb8, 0xdf, 0xbd, 0x16, 0xbd, 0xac, 0xe7, 0xa3,
		0x81, 0x98, 0xb1, 0x80, 0x92, 0xe1, 0xb9, 0xd7, 0x3f, 0xf5, 0xd4, 0x23, 0x9a, 0x47, 0x52, 0x7a,
		0x7d, 0x81, 0xea, 0x1e, 0x9d, 0x8d, 0xe7, 0x16, 0xd3, 0xc7, 0x78, 0x24, 0xa8, 0x57, 0x0d, 0xf1,
		0x7c, 0xf6, 0xfc, 0xc5, 0x3a, 0xb7, 0x68, 0xd4, 0x24, 0x1c, 0xb5, 0xde, 0xd1, 0xe7, 0x34, 0x88,
		0x3f, 0x57, 0xfc, 0x17, 0xeb, 0xc5, 0xbb, 0xaa, 0x1d, 0x15, 0x47, 0xe8, 0xb1, 0x12, 0x6c, 0xae,
	}
	actual, err := AlgorithmRS384.Sign(data, []byte(testRSAPrivateKey))
	require.Nil(t, err)
	require.Equal(t, expected, actual)
}

func TestRS512Sign(t *testing.T) {
	data := "data"
	expected := []byte{
		0x86, 0x85, 0x3f, 0x7b, 0x4f, 0x71, 0xa3, 0x8b, 0x6b, 0xa4, 0x46, 0x10, 0x19, 0x41, 0xcd, 0xfe,
		0xe9, 0xfb, 0x07, 0x48, 0xbf, 0xe1, 0xb2, 0x0d, 0xde, 0x55, 0x77, 0x75, 0x77, 0x2c, 0xd0, 0x87,
		0x98, 0xb3, 0xe3, 0x09, 0x2c, 0x99, 0xa5, 0xa7, 0x61, 0x78, 0x23, 0x57, 0x96, 0x58, 0x3d, 0x96,
		0xff, 0x99, 0x69, 0x18, 0xa4, 0x0a, 0x21, 0x1a, 0xba, 0xe9, 0x21, 0x86, 0xdb, 0x52, 0x64, 0xd8,
		0x86, 0xd8, 0xdf, 0x8c, 0x2f, 0x8b, 0x68, 0xfc, 0x59, 0x7a, 0x8d, 0x97, 0x6b, 0x3f, 0xfb, 0x79,
		0x9d, 0xf1, 0x2c, 0x1d, 0x76, 0xd8, 0x3e, 0xb7, 0xd7, 0x57, 0x87, 0x89, 0x96, 0x4c, 0xaa, 0x83,
		0xac, 0xfe, 0x55, 0xc7, 0x37, 0xc9, 0x1f, 0xdf, 0x7d, 0xe8, 0xc2, 0x48, 0x21, 0x48, 0xf0, 0xaf,
		0x7d, 0xb4, 0x50, 0x70, 0x9f, 0xa6, 0x1e, 0x94, 0xda, 0xb4, 0x9e, 0x87, 0x83, 0x26, 0xb9, 0x85,
		0x50, 0x9b, 0xb8, 0x95, 0xd2, 0x35, 0x54, 0xe6, 0x8b, 0xd2, 0x37, 0x73, 0x3d, 0x1a, 0xf4, 0xe7,
		0x27, 0xf9, 0x26, 0x9b, 0xd4, 0xca, 0xbe, 0x13, 0x6e, 0x8e, 0x2e, 0x88, 0xc8, 0x8d, 0x85, 0x69,
		0xd0, 0xf3, 0xab, 0xc4, 0x49, 0x3c, 0xa8, 0x4f, 0x9a, 0xa5, 0x56, 0x3f, 0xf0, 0xb2, 0x51, 0x4c,
		0xe9, 0x88, 0xce, 0x39, 0x5c, 0x3e, 0xc6, 0xf6, 0x2b, 0xa1, 0x2d, 0x62, 0x8a, 0x4b, 0xbd, 0x9b,
		0xaa, 0x2c, 0x0b, 0xcc, 0x94, 0x9a, 0xac, 0xd3, 0xd4, 0xea, 0x77, 0x77, 0xe0, 0x98, 0x21, 0x52,
		0xb6, 0x6e, 0xec, 0x2b, 0x23, 0x09, 0x34, 0xb2, 0xfe, 0x0d, 0x30, 0x5d, 0xec, 0xab, 0x35, 0x50,
		0xa0, 0x83, 0x42, 0x17, 0x1a, 0x5b, 0x71, 0x1f, 0xbf, 0x7b, 0x11, 0x49, 0x57, 0x01, 0xc8, 0x4c,
		0x11, 0xbc, 0x6f, 0x41, 0x55, 0x08, 0x03, 0xfa, 0x07, 0x50, 0xc0, 0xee, 0x4a, 0xb4, 0xcc, 0xec,
		0xa7, 0xc3, 0x24, 0x7d, 0xe3, 0x07, 0x88, 0xb6, 0x9f, 0x06, 0x86, 0x0e, 0xfb, 0x39, 0xce, 0xf2,
		0x18, 0xea, 0x81, 0x25, 0x4c, 0x13, 0x2f, 0x5c, 0xce, 0xf9, 0x06, 0xfb, 0xd9, 0xe0, 0x92, 0x3b,
		0x90, 0xef, 0xec, 0xf8, 0x09, 0x0b, 0x1d, 0xf3, 0xe2, 0xd1, 0x95, 0x57, 0xbb, 0x86, 0x3b, 0x79,
		0x22, 0xb8, 0x6b, 0x20, 0xf1, 0x76, 0x57, 0x3d, 0xe6, 0x78, 0x15, 0xea, 0x83, 0x80, 0x0a, 0x84,
		0xef, 0x5d, 0xf8, 0xbf, 0xa3, 0x78, 0xa7, 0xe3, 0xff, 0x46, 0x49, 0x7b, 0x83, 0x05, 0x4c, 0xae,
		0xcd, 0xce, 0x78, 0xb3, 0xc8, 0x15, 0xce, 0x34, 0xf6, 0x0a, 0xf1, 0x26, 0x8d, 0xd6, 0x30, 0x63,
		0x86, 0xb2, 0xe7, 0x74, 0xe4, 0xb0, 0xdf, 0x16, 0x8f, 0x98, 0x76, 0xe8, 0xf0, 0x03, 0xdb, 0xd8,
		0x95, 0xd7, 0xc2, 0x7c, 0xde, 0xf1, 0x54, 0x72, 0xc3, 0xa9, 0x98, 0xf4, 0xa5, 0x10, 0xd2, 0xbb,
		0xda, 0xc6, 0x84, 0x94, 0x98, 0x5d, 0xec, 0xcc, 0x7b, 0x12, 0x13, 0x55, 0x70, 0x91, 0xf1, 0xed,
		0x76, 0xa5, 0x12, 0x57, 0xac, 0x01, 0xa0, 0xd6, 0xbb, 0xb0, 0x27, 0xeb, 0x98, 0x0e, 0xf3, 0xeb,
		0x2b, 0xea, 0xdf, 0x3f, 0x97, 0x63, 0x29, 0xd0, 0xcb, 0xc3, 0x63, 0x51, 0x9b, 0x10, 0x45, 0x5c,
		0x5c, 0x7a, 0xc6, 0x79, 0x21, 0xd6, 0xec, 0x26, 0x1d, 0x0a, 0x31, 0x84, 0xd9, 0x71, 0xdf, 0xd0,
		0xde, 0x40, 0x62, 0x05, 0x51, 0xf7, 0xea, 0x88, 0xca, 0xb9, 0xb9, 0x21, 0xcc, 0x6b, 0xe3, 0xf5,
		0xd8, 0x86, 0x83, 0x90, 0x7f, 0xf7, 0x10, 0x0a, 0xae, 0xb1, 0x55, 0xd0, 0x45, 0x54, 0x44, 0x9a,
		0xf8, 0xab, 0x4f, 0x22, 0xaa, 0x5e, 0x95, 0x37, 0xde, 0x2a, 0x8b, 0x41, 0x14, 0xcc, 0x57, 0x9b,
		0xe6, 0xe7, 0x92, 0x23, 0xd4, 0xb0, 0x47, 0xc2, 0xcf, 0xa9, 0xa5, 0x2e, 0x6e, 0xe6, 0xa8, 0x3e,
	}
	actual, err := AlgorithmRS512.Sign(data, []byte(testRSAPrivateKey))
	require.Nil(t, err)
	require.Equal(t, expected, actual)
}

func TestRSASign(t *testing.T) {
	TestRS256Sign(t)
	TestRS384Sign(t)
	TestRS512Sign(t)
}

func TestRS256Valid(t *testing.T) {
	data := "data"
	sig, err := AlgorithmRS256.Sign(data, []byte(testRSAPrivateKey))
	require.Nil(t, err)
	err = AlgorithmRS256.Valid(data, sig, []byte(testRSAPublicKey))
	require.Nil(t, err)
}

func TestRS384Valid(t *testing.T) {
	data := "data"
	sig, err := AlgorithmRS384.Sign(data, []byte(testRSAPrivateKey))
	require.Nil(t, err)
	err = AlgorithmRS384.Valid(data, sig, []byte(testRSAPublicKey))
	require.Nil(t, err)
}

func TestRS512Valid(t *testing.T) {
	data := "data"
	sig, err := AlgorithmRS512.Sign(data, []byte(testRSAPrivateKey))
	require.Nil(t, err)
	err = AlgorithmRS512.Valid(data, sig, []byte(testRSAPublicKey))
	require.Nil(t, err)
}

func TestRSAValid(t *testing.T) {
	TestRS256Valid(t)
	TestRS384Valid(t)
	TestRS512Valid(t)
}

func TestRS256Name(t *testing.T) {
	expected := AlgorithmRS256.name
	actual := AlgorithmRS256.Name()
	require.Equal(t, expected, actual)
}

func TestRS384Name(t *testing.T) {
	expected := AlgorithmRS384.name
	actual := AlgorithmRS384.Name()
	require.Equal(t, expected, actual)
}

func TestRS512Name(t *testing.T) {
	expected := AlgorithmRS512.name
	actual := AlgorithmRS512.Name()
	require.Equal(t, expected, actual)
}

func TestRSAName(t *testing.T) {
	TestRS256Name(t)
	TestRS384Name(t)
	TestRS512Name(t)
}

func TestRS256PrivateKey(t *testing.T) {
	k, err := AlgorithmRS256.PrivateKey([]byte(testRSAPrivateKey))
	require.Nil(t, err)
	require.Nil(t, k.Validate())
}

func TestRS384PrivateKey(t *testing.T) {
	k, err := AlgorithmRS384.PrivateKey([]byte(testRSAPrivateKey))
	require.Nil(t, err)
	require.Nil(t, k.Validate())
}

func TestRS512PrivateKey(t *testing.T) {
	k, err := AlgorithmRS512.PrivateKey([]byte(testRSAPrivateKey))
	require.Nil(t, err)
	require.Nil(t, k.Validate())
}

func TestRSAPrivateKey(t *testing.T) {
	TestRS256PrivateKey(t)
	TestRS384PrivateKey(t)
	TestRS512PrivateKey(t)
}

func TestRS256PublicKey(t *testing.T) {
	keySize := 4096 / 8
	k, err := AlgorithmRS256.PublicKey([]byte(testRSAPublicKey))
	require.Nil(t, err)
	require.Equal(t, keySize, k.Size())
}

func TestRS384PublicKey(t *testing.T) {
	keySize := 4096 / 8
	k, err := AlgorithmRS384.PublicKey([]byte(testRSAPublicKey))
	require.Nil(t, err)
	require.Equal(t, keySize, k.Size())
}

func TestRS512PublicKey(t *testing.T) {
	keySize := 4096 / 8
	k, err := AlgorithmRS512.PublicKey([]byte(testRSAPublicKey))
	require.Nil(t, err)
	require.Equal(t, keySize, k.Size())
}

func TestRSAPublicKey(t *testing.T) {
	TestRS256PublicKey(t)
	TestRS384PublicKey(t)
	TestRS512PublicKey(t)
}
