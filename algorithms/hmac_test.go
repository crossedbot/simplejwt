package algorithms

import (
	"testing"

	"github.com/stretchr/testify/require"
)

func TestHS256Sign(t *testing.T) {
	key := []byte("shared key")
	data := "data"
	// generated by: $ echo -n "data" | openssl dgst -hex -sha256 -hmac "shared key"
	expected := []byte{
		0x9e, 0x1e, 0x21, 0xb8, 0x74, 0x4a, 0x68, 0xb3,
		0x6c, 0xb3, 0x75, 0x39, 0xb9, 0x2d, 0x74, 0x67,
		0xc2, 0x3c, 0xbf, 0x38, 0x1b, 0x48, 0x80, 0xa2,
		0xe7, 0x07, 0xe7, 0xaa, 0x6d, 0x88, 0x68, 0xb9,
	}
	actual, err := AlgorithmHS256.Sign(data, key)
	require.Nil(t, err)
	require.Equal(t, expected, actual)
}

func TestHS384Sign(t *testing.T) {
	key := []byte("shared key")
	data := "data"
	// generated by: $ echo -n "data" | openssl dgst -hex -sha384 -hmac "shared key"
	expected := []byte{
		0x82, 0x65, 0xfd, 0x88, 0x23, 0x47, 0x9b, 0x36,
		0xec, 0xe7, 0xdd, 0x04, 0xa0, 0x88, 0xc9, 0x15,
		0xa0, 0x65, 0x5e, 0x16, 0x16, 0x47, 0x7b, 0xeb,
		0xcb, 0x52, 0xa5, 0xe6, 0xb7, 0x25, 0x85, 0x29,
		0xf6, 0x22, 0x99, 0xc3, 0x9f, 0x55, 0x81, 0x70,
		0xff, 0x6e, 0x7b, 0xa4, 0xad, 0xfc, 0xda, 0x37,
	}
	actual, err := AlgorithmHS384.Sign(data, key)
	require.Nil(t, err)
	require.Equal(t, expected, actual)
}

func TestHS512Sign(t *testing.T) {
	key := []byte("shared key")
	data := "data"
	// generated by: $ echo -n "data" | openssl dgst -hex -sha512 -hmac "shared key"
	expected := []byte{
		0x4d, 0xc7, 0x11, 0xa4, 0x67, 0x4e, 0xee, 0x20,
		0x47, 0xc2, 0x1d, 0x00, 0x28, 0xc4, 0x64, 0x72,
		0x97, 0x91, 0x90, 0x28, 0x6c, 0x4b, 0xfe, 0x76,
		0x0a, 0x5a, 0xed, 0x74, 0x20, 0xe9, 0x6d, 0xe9,
		0xd1, 0x19, 0xda, 0xf8, 0xc0, 0x06, 0xce, 0x33,
		0xec, 0x22, 0xf2, 0x6c, 0xa1, 0x10, 0x9f, 0x10,
		0x58, 0xa6, 0x8a, 0xa6, 0x44, 0xe0, 0x9b, 0x40,
		0xda, 0x82, 0xef, 0xe4, 0x07, 0x65, 0x32, 0xcf,
	}
	actual, err := AlgorithmHS512.Sign(data, key)
	require.Nil(t, err)
	require.Equal(t, expected, actual)
}

func TestHMACSign(t *testing.T) {
	TestHS256Sign(t)
	TestHS384Sign(t)
	TestHS512Name(t)
}

func TestHS256Valid(t *testing.T) {
	key := []byte("shared key")
	data := "data"
	sig, err := AlgorithmHS256.Sign(data, key)
	require.Nil(t, err)
	err = AlgorithmHS256.Valid(data, sig, key)
	require.Nil(t, err)
}

func TestHS384Valid(t *testing.T) {
	key := []byte("shared key")
	data := "data"
	sig, err := AlgorithmHS384.Sign(data, key)
	require.Nil(t, err)
	err = AlgorithmHS384.Valid(data, sig, key)
	require.Nil(t, err)
}

func TestHS512Valid(t *testing.T) {
	key := []byte("shared key")
	data := "data"
	sig, err := AlgorithmHS512.Sign(data, key)
	require.Nil(t, err)
	err = AlgorithmHS512.Valid(data, sig, key)
	require.Nil(t, err)
}

func TestHMACValid(t *testing.T) {
	TestHS256Valid(t)
	TestHS384Valid(t)
	TestHS512Valid(t)
}

func TestHS256Name(t *testing.T) {
	expected := AlgorithmHS256.name
	actual := AlgorithmHS256.Name()
	require.Equal(t, expected, actual)
}

func TestHS384Name(t *testing.T) {
	expected := AlgorithmHS384.name
	actual := AlgorithmHS384.Name()
	require.Equal(t, expected, actual)
}

func TestHS512Name(t *testing.T) {
	expected := AlgorithmHS512.name
	actual := AlgorithmHS512.Name()
	require.Equal(t, expected, actual)
}

func TestHMACName(t *testing.T) {
	TestHS256Name(t)
	TestHS384Name(t)
	TestHS512Name(t)
}
