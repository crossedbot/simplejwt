package algorithms

import (
	"testing"

	"github.com/stretchr/testify/require"
)

func TestPS256Sign(t *testing.T) {
	data := "data"
	sig, err := AlgorithmPS256.Sign(data, []byte(testRSAPrivateKey))
	require.Nil(t, err)
	require.NotNil(t, sig)
}

func TestPS384Sign(t *testing.T) {
	data := "data"
	sig, err := AlgorithmPS384.Sign(data, []byte(testRSAPrivateKey))
	require.Nil(t, err)
	require.NotNil(t, sig)
}

func TestPS512Sign(t *testing.T) {
	data := "data"
	sig, err := AlgorithmPS512.Sign(data, []byte(testRSAPrivateKey))
	require.Nil(t, err)
	require.NotNil(t, sig)
}

func TestRSAPSSSign(t *testing.T) {
	TestPS256Sign(t)
	TestPS384Sign(t)
	TestPS512Sign(t)
}

func TestPS256Valid(t *testing.T) {
	data := "data"
	sig := []byte{
		0x4e, 0x4c, 0xc3, 0xc1, 0xc3, 0x96, 0x86, 0xe4, 0xed, 0x5c, 0x73, 0x17, 0x91, 0x1b, 0x67, 0xc6,
		0x78, 0x0e, 0x0e, 0xc6, 0x00, 0x0c, 0xb6, 0xee, 0x1e, 0xe1, 0xaa, 0xe0, 0x0b, 0x48, 0x69, 0xb6,
		0xec, 0x97, 0x77, 0x5c, 0xa6, 0x50, 0x26, 0xca, 0x0b, 0x67, 0x78, 0xa2, 0xe5, 0x32, 0x7d, 0x19,
		0x9e, 0x60, 0xeb, 0xae, 0x0d, 0x4a, 0xc7, 0xf4, 0x0c, 0x08, 0x4c, 0xdf, 0xcf, 0xd6, 0xf9, 0xd9,
		0x61, 0x7a, 0x5b, 0xa8, 0xbe, 0x91, 0xa6, 0x52, 0xf4, 0x90, 0x10, 0xae, 0x30, 0xe9, 0xd8, 0x08,
		0x9e, 0x56, 0x25, 0x0f, 0x65, 0x10, 0x3f, 0x10, 0x97, 0x02, 0x82, 0x2c, 0xe3, 0x4b, 0xee, 0x47,
		0xec, 0x35, 0x49, 0x7d, 0x65, 0x84, 0xd7, 0x16, 0x47, 0xd6, 0x16, 0xc8, 0xf3, 0x24, 0x2c, 0x8d,
		0x30, 0xfc, 0x4b, 0xdb, 0x21, 0xfb, 0x48, 0xa1, 0xc1, 0x9b, 0xf8, 0xb2, 0x2e, 0x3f, 0x15, 0x25,
		0x4b, 0x18, 0xe1, 0xe1, 0xc4, 0x5a, 0x2e, 0x92, 0x68, 0x7b, 0x6e, 0x54, 0xb1, 0x49, 0x15, 0x49,
		0x85, 0xde, 0xab, 0xca, 0xad, 0x03, 0xe1, 0xdd, 0x0a, 0xd7, 0x77, 0xe4, 0xfa, 0x52, 0x45, 0x9b,
		0xdc, 0x87, 0x7c, 0x8d, 0xd4, 0x98, 0x26, 0x76, 0xa3, 0x3a, 0xcd, 0xd3, 0x4b, 0xa3, 0xca, 0xb1,
		0x5e, 0x42, 0xc3, 0xc8, 0xe2, 0x57, 0xec, 0x8a, 0x80, 0xad, 0xb7, 0x59, 0xe1, 0x37, 0x30, 0xb3,
		0xdc, 0x5b, 0xd5, 0x50, 0xfc, 0x09, 0x78, 0x3b, 0xcf, 0x81, 0xd7, 0x0a, 0x45, 0x62, 0xa0, 0xd3,
		0x59, 0xb1, 0x5d, 0xfc, 0x3c, 0xbf, 0x00, 0xcf, 0x0b, 0x3b, 0x98, 0x38, 0x4c, 0xae, 0x71, 0x7d,
		0x2e, 0xb3, 0x1d, 0x32, 0xeb, 0x7f, 0x57, 0x1d, 0x8b, 0xe6, 0x6f, 0x8b, 0xd5, 0xc2, 0xb7, 0x68,
		0x50, 0x51, 0xdd, 0x09, 0xb8, 0x6e, 0x88, 0x28, 0x74, 0x7a, 0x4b, 0xb2, 0xba, 0xa9, 0x90, 0x51,
		0xa9, 0x36, 0x5d, 0xb8, 0xae, 0xab, 0xa6, 0xbc, 0xd4, 0x0c, 0x23, 0x14, 0xc2, 0xfe, 0x07, 0x4d,
		0xf6, 0x09, 0x63, 0x80, 0xb9, 0x1e, 0x25, 0x4f, 0xe3, 0x86, 0x63, 0xdf, 0x5c, 0xaa, 0x57, 0x58,
		0x05, 0xf0, 0x0c, 0x8f, 0x23, 0xa0, 0x11, 0x17, 0xde, 0x8c, 0x6a, 0x53, 0x30, 0xf6, 0x80, 0x75,
		0x7b, 0xca, 0xcd, 0xf1, 0x22, 0xd6, 0x76, 0xd6, 0x39, 0x0b, 0xf3, 0xce, 0x6a, 0xa9, 0x94, 0xbe,
		0xb0, 0xbd, 0xe3, 0x4b, 0xbd, 0x1f, 0x07, 0x89, 0xad, 0xbd, 0x1d, 0xbe, 0x99, 0x4e, 0x4c, 0x7c,
		0x71, 0x35, 0x27, 0x8e, 0x38, 0x37, 0xd7, 0x54, 0xfc, 0x81, 0x86, 0x35, 0x16, 0xd6, 0xc9, 0xe0,
		0xa9, 0x81, 0x43, 0xfb, 0xb4, 0xca, 0x3b, 0xb5, 0x1a, 0x1e, 0x69, 0x3e, 0x72, 0x22, 0xf3, 0xb7,
		0x1a, 0xd6, 0x43, 0x40, 0x59, 0x0e, 0x16, 0x28, 0x11, 0xcb, 0x1d, 0x62, 0x6c, 0xb2, 0x5e, 0x24,
		0xc0, 0xbb, 0xdc, 0xad, 0xc4, 0x15, 0x1a, 0xb3, 0x42, 0xc1, 0xbf, 0xb6, 0x64, 0x40, 0x21, 0x4f,
		0x21, 0x7c, 0x5e, 0x21, 0x3c, 0xb0, 0x46, 0x4e, 0xfb, 0x8a, 0x94, 0x67, 0x5d, 0xc2, 0x9e, 0xcc,
		0xa0, 0x14, 0xe8, 0xcc, 0xe6, 0x4d, 0x26, 0xd5, 0xd6, 0x1b, 0xe7, 0x8a, 0x06, 0x31, 0xfa, 0x54,
		0x80, 0x90, 0xd2, 0x7f, 0xa0, 0xba, 0x8b, 0xec, 0xb1, 0x97, 0xe6, 0xcb, 0x62, 0x3e, 0x50, 0x20,
		0x4e, 0xb3, 0x18, 0x2d, 0xe7, 0x5e, 0xc2, 0xae, 0xfe, 0x34, 0xd3, 0x65, 0xd7, 0xea, 0x1a, 0x14,
		0xe9, 0x5b, 0x6a, 0x9a, 0x91, 0xe6, 0x14, 0x0d, 0xe7, 0xde, 0x86, 0x24, 0xc9, 0xdd, 0x16, 0x06,
		0x4e, 0xf6, 0x71, 0x03, 0x69, 0x13, 0x51, 0x99, 0x8a, 0x6e, 0xfe, 0x52, 0xa4, 0xb4, 0x4d, 0x1b,
		0xb6, 0xef, 0xc6, 0x53, 0x7a, 0x4b, 0x5a, 0xf3, 0xc4, 0xf7, 0x5e, 0xed, 0xff, 0x85, 0x3a, 0xa9,
	}
	err := AlgorithmPS256.Valid(data, sig, []byte(testRSAPublicKey))
	require.Nil(t, err)
}

func TestPS384Valid(t *testing.T) {
	data := "data"
	sig := []byte{
		0x35, 0xd0, 0xc2, 0x26, 0xaf, 0x73, 0x6c, 0x04, 0x7d, 0x11, 0xb8, 0xbe, 0x57, 0xd6, 0x96, 0x0d,
		0xa0, 0xa6, 0xb8, 0x8f, 0x51, 0x67, 0x71, 0x19, 0x08, 0xf8, 0xab, 0x89, 0xf8, 0x74, 0x7b, 0x25,
		0x08, 0xb9, 0x8e, 0x11, 0xfe, 0x7d, 0x7d, 0x4e, 0x20, 0xac, 0x3c, 0x46, 0x5a, 0x62, 0xc8, 0xfd,
		0x55, 0x9e, 0xe9, 0x1a, 0x14, 0xee, 0x77, 0x9c, 0x68, 0x82, 0xa4, 0x0e, 0x3f, 0x49, 0xaa, 0xc0,
		0xf1, 0x7d, 0xe7, 0xde, 0x43, 0xfe, 0x18, 0xa5, 0x26, 0x42, 0xf0, 0x55, 0x8b, 0xaf, 0x78, 0x0e,
		0x61, 0xa1, 0x38, 0x23, 0xe4, 0x8b, 0xf1, 0xa4, 0xe3, 0xb7, 0xa7, 0xd3, 0x6d, 0xef, 0xcb, 0x70,
		0x3c, 0x08, 0x62, 0x15, 0x44, 0x37, 0xa0, 0x0e, 0x7b, 0xc9, 0xde, 0xbe, 0x23, 0x26, 0xe1, 0x30,
		0x05, 0xcf, 0xb7, 0x39, 0x5a, 0x40, 0xde, 0xb4, 0x16, 0x82, 0xa3, 0xbf, 0xe9, 0x28, 0xa6, 0x78,
		0x40, 0xb4, 0x93, 0xb2, 0xca, 0xf5, 0x3e, 0x5b, 0xb3, 0x9a, 0x1d, 0x21, 0x96, 0x13, 0x1a, 0x20,
		0xd7, 0x9d, 0xc4, 0x03, 0xa9, 0xd0, 0x0e, 0x88, 0x95, 0xa7, 0xd4, 0xcf, 0x6a, 0x2d, 0x14, 0xf6,
		0x86, 0xcc, 0x3d, 0xbb, 0xcf, 0x76, 0x70, 0x67, 0x0f, 0x13, 0x1b, 0x32, 0x3c, 0xe6, 0x00, 0x8f,
		0xd9, 0xee, 0x5f, 0xaf, 0xec, 0xe7, 0xbe, 0x48, 0x5b, 0xe1, 0x6c, 0x99, 0xf4, 0xba, 0xf4, 0x47,
		0xe9, 0xff, 0x7f, 0xc3, 0x58, 0x91, 0xbe, 0x7a, 0xe0, 0xc9, 0xfa, 0xea, 0x09, 0x4f, 0xbf, 0x89,
		0x6e, 0x24, 0x75, 0x1b, 0xb1, 0x39, 0x47, 0x87, 0x4a, 0x28, 0x87, 0x88, 0x0a, 0x56, 0xd8, 0x54,
		0x46, 0xb1, 0x42, 0x24, 0x70, 0x63, 0xb3, 0xcb, 0xe4, 0x95, 0xc1, 0x52, 0xf0, 0x78, 0xf2, 0x4b,
		0xc2, 0xc2, 0x34, 0x87, 0x84, 0xba, 0x05, 0x4d, 0x04, 0x96, 0xfa, 0x32, 0x88, 0x0f, 0x72, 0x15,
		0xa7, 0xd3, 0x02, 0xbe, 0xaa, 0x42, 0x75, 0x8a, 0xf7, 0xbe, 0x8c, 0x8f, 0x14, 0xe4, 0x34, 0x03,
		0xce, 0xc1, 0x37, 0x3d, 0xd5, 0x59, 0xed, 0xfe, 0x74, 0x50, 0xca, 0x15, 0xe5, 0x1e, 0x0a, 0x8a,
		0x8f, 0x21, 0x3e, 0xd8, 0x56, 0x9b, 0x90, 0xcb, 0xc0, 0x8e, 0x1e, 0xe1, 0x8f, 0x02, 0xe7, 0x98,
		0x48, 0x69, 0xf6, 0x8e, 0x58, 0x1b, 0x5f, 0x41, 0x94, 0xdc, 0x04, 0xee, 0x20, 0x73, 0x50, 0xdb,
		0xa1, 0xed, 0xc4, 0x53, 0x2a, 0x84, 0x43, 0x68, 0x50, 0x50, 0x03, 0x9a, 0x50, 0x27, 0x3c, 0x2b,
		0xf9, 0xd3, 0x2a, 0x03, 0x05, 0xcf, 0xe4, 0x7d, 0x34, 0xf3, 0xdf, 0xd7, 0xba, 0xed, 0xeb, 0x6c,
		0x73, 0x89, 0xe6, 0xb6, 0x3b, 0xff, 0xac, 0x63, 0xf9, 0x80, 0x5a, 0x8c, 0x08, 0x16, 0x42, 0x79,
		0xdf, 0xb6, 0xdc, 0x19, 0xf5, 0x34, 0x94, 0xdd, 0xba, 0x48, 0xcf, 0xa3, 0x8d, 0xad, 0xf5, 0x02,
		0xbc, 0xec, 0xa0, 0x80, 0x0e, 0xf0, 0x2b, 0x0e, 0x9c, 0xad, 0x35, 0x7b, 0xc6, 0x6f, 0xf8, 0x3c,
		0xb3, 0x47, 0x56, 0x6d, 0x14, 0xfa, 0x9a, 0x0e, 0xb0, 0xf9, 0xea, 0xb1, 0xab, 0x46, 0x67, 0x3f,
		0x55, 0x54, 0x5c, 0x59, 0x0a, 0xf7, 0x35, 0x27, 0x12, 0x20, 0x5b, 0x11, 0x41, 0x0b, 0x7e, 0xf7,
		0x01, 0xe3, 0x80, 0xe6, 0x18, 0x4d, 0xdf, 0x09, 0x70, 0xf8, 0x35, 0xae, 0x89, 0x20, 0xfb, 0x47,
		0xf8, 0x22, 0x84, 0x93, 0x0d, 0x36, 0x14, 0x27, 0xe3, 0x8f, 0xfa, 0x94, 0xf5, 0x5b, 0x43, 0xe4,
		0x57, 0xe1, 0xa9, 0x7a, 0x8b, 0x3c, 0xd1, 0x28, 0x37, 0x6b, 0x78, 0x2f, 0x55, 0x59, 0xa8, 0x82,
		0x98, 0x3f, 0xf6, 0xd5, 0x34, 0x6e, 0x0d, 0x4f, 0x43, 0xa3, 0x27, 0x3e, 0xaf, 0x98, 0x9e, 0xee,
		0xb6, 0xc6, 0x72, 0x32, 0x5e, 0x69, 0x56, 0xb7, 0x5e, 0x6c, 0x0e, 0x34, 0x15, 0x26, 0xdb, 0x85,
	}
	err := AlgorithmPS384.Valid(data, sig, []byte(testRSAPublicKey))
	require.Nil(t, err)
}

func TestPS512Valid(t *testing.T) {
	data := "data"
	sig := []byte{
		0x5f, 0xe4, 0xf1, 0x46, 0xfb, 0x9b, 0x52, 0xd2, 0xcd, 0x0a, 0xb2, 0xa8, 0x94, 0x3b, 0x9b, 0x3a,
		0x59, 0xb8, 0x37, 0x1f, 0xee, 0x08, 0x6c, 0x20, 0x57, 0x3c, 0x8a, 0x69, 0xae, 0xa8, 0x16, 0xab,
		0x1b, 0xba, 0x28, 0xbe, 0x19, 0xc4, 0xdd, 0x8e, 0x29, 0xe7, 0x91, 0x3e, 0x39, 0x09, 0xa8, 0x39,
		0x13, 0x55, 0x0c, 0xc9, 0xc8, 0x01, 0x33, 0x33, 0xf9, 0x5d, 0xc4, 0x3d, 0x46, 0xb5, 0xaf, 0x13,
		0xa0, 0x4a, 0xc5, 0x48, 0x4c, 0x62, 0x4e, 0x98, 0xd2, 0x19, 0xe2, 0x66, 0xbe, 0x6a, 0x0c, 0x27,
		0xe7, 0x89, 0xf6, 0xe2, 0x0f, 0x1a, 0x10, 0x1b, 0xfc, 0x0a, 0xa3, 0xdf, 0x66, 0xb4, 0x49, 0xd1,
		0xc6, 0x7f, 0x5a, 0x49, 0x79, 0x19, 0x33, 0x13, 0xd1, 0xe1, 0x73, 0xf7, 0x82, 0x21, 0x82, 0x24,
		0x60, 0xc2, 0xe0, 0x8d, 0xb1, 0x9a, 0x11, 0xac, 0x08, 0x03, 0xa2, 0x73, 0xa0, 0x03, 0x1b, 0x71,
		0x63, 0xd6, 0x0e, 0x3d, 0xa1, 0x74, 0xd0, 0xa7, 0xb6, 0x9f, 0xcb, 0xa8, 0xe4, 0x69, 0x4e, 0x32,
		0xa6, 0x9a, 0x63, 0xd1, 0x47, 0x49, 0xa1, 0x95, 0x19, 0xde, 0x25, 0x33, 0x5f, 0xbb, 0xfe, 0xaa,
		0x2c, 0x0c, 0x18, 0xe9, 0x11, 0xc8, 0xb1, 0xd1, 0xc6, 0x47, 0x18, 0x08, 0xd8, 0x42, 0x97, 0xd7,
		0x34, 0x38, 0x87, 0xa0, 0x50, 0x0a, 0xc6, 0xde, 0xe9, 0x45, 0xde, 0xbf, 0x40, 0x2b, 0xef, 0x99,
		0x77, 0x80, 0x90, 0xcb, 0x98, 0x60, 0x4c, 0x32, 0x02, 0xc8, 0xcf, 0x75, 0xba, 0x1a, 0xf2, 0x8e,
		0xcc, 0xc2, 0xab, 0xf0, 0x36, 0x60, 0x63, 0x0b, 0x91, 0x17, 0x75, 0x41, 0x7e, 0x22, 0x8a, 0x94,
		0x07, 0x8f, 0xeb, 0x03, 0xfc, 0x8d, 0x89, 0x39, 0xf4, 0xdb, 0x93, 0x2d, 0x6c, 0x73, 0x5b, 0xeb,
		0xd5, 0x1b, 0x72, 0x5f, 0x83, 0x3e, 0xd8, 0x74, 0xfb, 0xa6, 0xbb, 0x3e, 0xdd, 0x24, 0x8a, 0xd6,
		0x12, 0x0b, 0x95, 0xc4, 0x9d, 0x73, 0xcb, 0x08, 0xae, 0x51, 0xfc, 0x86, 0xd0, 0xe4, 0x9a, 0xc5,
		0x43, 0x14, 0xfe, 0x92, 0x9c, 0x6a, 0xaa, 0xef, 0xff, 0xe9, 0xd5, 0x40, 0x6e, 0x5d, 0x63, 0x58,
		0x94, 0x23, 0xae, 0x2e, 0x66, 0x08, 0xe0, 0x3b, 0x19, 0x29, 0x3d, 0xb5, 0xfe, 0xf1, 0x1b, 0xb7,
		0xc7, 0xbc, 0x3c, 0xf9, 0x04, 0x33, 0x59, 0x81, 0x83, 0x44, 0x71, 0xfb, 0xb5, 0x85, 0x64, 0xbf,
		0xf6, 0xe8, 0xf8, 0x97, 0x1d, 0xee, 0x25, 0xbf, 0xb7, 0xf6, 0x1f, 0x04, 0xb9, 0xd4, 0x84, 0xdf,
		0x93, 0xc5, 0xaa, 0xd2, 0x98, 0x3c, 0x08, 0x79, 0xf9, 0x1d, 0x14, 0x45, 0xcb, 0x34, 0x22, 0xa3,
		0x2b, 0x25, 0x8b, 0xfa, 0x4a, 0x2b, 0x93, 0x8c, 0xff, 0x27, 0x51, 0xbb, 0xcc, 0x68, 0x1f, 0x1e,
		0x85, 0x0f, 0xaa, 0x55, 0x7e, 0x31, 0xf2, 0x4f, 0x3d, 0xad, 0x0f, 0x07, 0x9f, 0x44, 0xea, 0x8a,
		0x76, 0xd6, 0xdf, 0xf6, 0x55, 0x8c, 0xa2, 0xfb, 0xd5, 0x07, 0xdd, 0x5d, 0x96, 0x9a, 0xf9, 0x18,
		0x2e, 0xf2, 0x39, 0x92, 0x6d, 0x21, 0x59, 0x5f, 0x36, 0x03, 0xce, 0x8b, 0x36, 0xd9, 0x1a, 0x7e,
		0x73, 0x0f, 0xe6, 0x4b, 0x61, 0x11, 0xd8, 0x72, 0x52, 0x21, 0x10, 0xae, 0x8d, 0x04, 0x9e, 0xa7,
		0x07, 0xa7, 0x94, 0xcc, 0x96, 0x1d, 0x26, 0xab, 0xdd, 0x66, 0xde, 0xba, 0xb2, 0xe7, 0x48, 0x0c,
		0xb1, 0x47, 0x7b, 0x9b, 0xd0, 0x9c, 0xc4, 0xe5, 0x58, 0xb1, 0x50, 0x02, 0x3f, 0x61, 0x41, 0xae,
		0x4a, 0xe7, 0x87, 0xb7, 0xba, 0xfe, 0x47, 0x7d, 0x6f, 0x10, 0x38, 0xfd, 0xd0, 0x6c, 0x87, 0x6c,
		0x60, 0x4c, 0xa6, 0xe3, 0x9c, 0x7a, 0x5b, 0xe7, 0x7e, 0x8c, 0xad, 0xfb, 0xa0, 0x44, 0x8e, 0x72,
		0xf2, 0x28, 0xb2, 0xfa, 0x7a, 0xf8, 0x47, 0xa6, 0xcb, 0xd4, 0x6d, 0x67, 0x8f, 0x71, 0xb1, 0x5b,
	}
	err := AlgorithmPS512.Valid(data, sig, []byte(testRSAPublicKey))
	require.Nil(t, err)
}

func TestRSAPSSValid(t *testing.T) {
	TestPS256Valid(t)
	TestPS384Valid(t)
	TestPS512Valid(t)
}

func TestPS256Name(t *testing.T) {
	expected := AlgorithmPS256.name
	actual := AlgorithmPS256.Name()
	require.Equal(t, expected, actual)
}

func TestPS384Name(t *testing.T) {
	expected := AlgorithmPS384.name
	actual := AlgorithmPS384.Name()
	require.Equal(t, expected, actual)
}

func TestPS512Name(t *testing.T) {
	expected := AlgorithmPS512.name
	actual := AlgorithmPS512.Name()
	require.Equal(t, expected, actual)
}

func TestRSAPSSName(t *testing.T) {
	TestPS256Name(t)
	TestPS384Name(t)
	TestPS512Name(t)
}

func TestPS256PrivateKey(t *testing.T) {
	k, err := AlgorithmPS256.PrivateKey([]byte(testRSAPrivateKey))
	require.Nil(t, err)
	require.Nil(t, k.Validate())
}

func TestPS384PrivateKey(t *testing.T) {
	k, err := AlgorithmPS384.PrivateKey([]byte(testRSAPrivateKey))
	require.Nil(t, err)
	require.Nil(t, k.Validate())
}

func TestPS512PrivateKey(t *testing.T) {
	k, err := AlgorithmPS512.PrivateKey([]byte(testRSAPrivateKey))
	require.Nil(t, err)
	require.Nil(t, k.Validate())
}

func TestRSAPSSPrivateKey(t *testing.T) {
	TestPS256PrivateKey(t)
	TestPS384PrivateKey(t)
	TestPS512PrivateKey(t)
}

func TestPS256PublicKey(t *testing.T) {
	keySize := 4096 / 8
	k, err := AlgorithmRS256.PublicKey([]byte(testRSAPublicKey))
	require.Nil(t, err)
	require.Equal(t, keySize, k.Size())
}

func TestPS384PublicKey(t *testing.T) {
	keySize := 4096 / 8
	k, err := AlgorithmRS384.PublicKey([]byte(testRSAPublicKey))
	require.Nil(t, err)
	require.Equal(t, keySize, k.Size())
}

func TestPS512PublicKey(t *testing.T) {
	keySize := 4096 / 8
	k, err := AlgorithmRS512.PublicKey([]byte(testRSAPublicKey))
	require.Nil(t, err)
	require.Equal(t, keySize, k.Size())
}

func TestRSAPSSPublicKey(t *testing.T) {
	TestPS256PublicKey(t)
	TestPS384PublicKey(t)
	TestPS512PublicKey(t)
}
