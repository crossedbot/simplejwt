package algorithms

import (
	"crypto/elliptic"
	"testing"

	"github.com/stretchr/testify/require"
)

// generated by: $ openssl ecparam -name prime256v1 -genkey -noout -outform PEM -out ecdsa256.key
var testEC256PrivateKey = `
-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIFXRoLORxwcQ3QbEkx0nvDC5sT2m9O1KD25L/2yBu7WHoAoGCCqGSM49
AwEHoUQDQgAE2R+Bgiv5RXDj/eAbMdKfcllMnGr8gksf3hYTuWu/xL9pk5+b1dV9
ox1vcJ46jye6BfIPTMlPMVOoweLflroZWw==
-----END EC PRIVATE KEY-----`

// generated by: $ openssl ec -in ./ecdsa256.key -pubout -outform PEM -out ecdsa256.key.pub
var testEC256PublicKey = `
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE2R+Bgiv5RXDj/eAbMdKfcllMnGr8
gksf3hYTuWu/xL9pk5+b1dV9ox1vcJ46jye6BfIPTMlPMVOoweLflroZWw==
-----END PUBLIC KEY-----`

// generated by: $ openssl ecparam -name secp384r1 -genkey -noout -outform PEM -out ecdsa384.key
var testEC384PrivateKey = `
-----BEGIN EC PRIVATE KEY-----
MIGkAgEBBDBs+pM4Mf4FtPKBQmmDKQeilJpchSlaa0tNfI+treyGwkeejaM0KiKs
p5zI8jtxjOSgBwYFK4EEACKhZANiAAQFYN1dfXTw8RvCsmVl6DT4pgAa+igXGbQ/
irVquSWtGyCn0GHcnGGI1FgmjY19JqeBtzNLzCa4rXf96FwRxMKt02OWp7cZs5c1
c/7rF+mdCslDfcXKNd3C4YJZNOvs7Wo=
-----END EC PRIVATE KEY-----`

// generated by: $ openssl ec -in ./ecdsa384.key -pubout -outform PEM -out ecdsa384.key.pub
var testEC384PublicKey = `
-----BEGIN PUBLIC KEY-----
MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEBWDdXX108PEbwrJlZeg0+KYAGvooFxm0
P4q1arklrRsgp9Bh3JxhiNRYJo2NfSangbczS8wmuK13/ehcEcTCrdNjlqe3GbOX
NXP+6xfpnQrJQ33FyjXdwuGCWTTr7O1q
-----END PUBLIC KEY-----`

// generated by: $ openssl ecparam -name secp521r1 -genkey -noout -outform PEM -out ecdsa521.key
var testEC512PrivateKey = `
-----BEGIN EC PRIVATE KEY-----
MIHcAgEBBEIAygxlhNoYbP/IAq4MKngvuKNTtHIdP3+bHWNC6gtZts/O8OKs9Hcs
wJhRWiO7MhKNllaP/QzGYb0EchxSv7gPpEigBwYFK4EEACOhgYkDgYYABAHSUdhW
3mpOSgMPwHcBn0cPX2j4l1y0rQAmCYVg/dGv2Hs9ifPspaa1nF0qPQopboaz0h1X
DLZz/+jlLBOnWgSY2wFbkutDegsgQCnoy6jwB1+MgeJq7LQcbr313uzxLj210GH8
shgawIzpx9rQCXKAV3D4fwYvY1M8DG6I9Ed2vM9duQ==
-----END EC PRIVATE KEY-----`

// generated by: $ openssl ec -in ./ecdsa521.key -pubout -outform PEM -out ecdsa521.key.pub
var testEC512PublicKey = `
-----BEGIN PUBLIC KEY-----
MIGbMBAGByqGSM49AgEGBSuBBAAjA4GGAAQB0lHYVt5qTkoDD8B3AZ9HD19o+Jdc
tK0AJgmFYP3Rr9h7PYnz7KWmtZxdKj0KKW6Gs9IdVwy2c//o5SwTp1oEmNsBW5Lr
Q3oLIEAp6Muo8AdfjIHiauy0HG699d7s8S49tdBh/LIYGsCM6cfa0AlygFdw+H8G
L2NTPAxuiPRHdrzPXbk=
-----END PUBLIC KEY-----`

func TestEC256Sign(t *testing.T) {
	data := "data"
	actual, err := AlgorithmEC256.Sign(data, []byte(testEC256PrivateKey))
	require.Nil(t, err)
	require.NotNil(t, actual)
	require.Equal(t, 2*AlgorithmEC256.keysz, len(actual))
}

func TestEC384Sign(t *testing.T) {
	data := "data"
	actual, err := AlgorithmEC384.Sign(data, []byte(testEC384PrivateKey))
	require.Nil(t, err)
	require.NotNil(t, actual)
	require.Equal(t, 2*AlgorithmEC384.keysz, len(actual))
}

func TestEC512Sign(t *testing.T) {
	data := "data"
	actual, err := AlgorithmEC512.Sign(data, []byte(testEC512PrivateKey))
	require.Nil(t, err)
	require.NotNil(t, actual)
	require.Equal(t, 2*AlgorithmEC512.keysz, len(actual))
}

func TestECDSASign(t *testing.T) {
	TestEC256Sign(t)
	TestEC384Sign(t)
	TestEC512Sign(t)
}

func TestEC256Valid(t *testing.T) {
	data := "data"
	sig := []byte{
		0xa5, 0x01, 0x4f, 0x9c, 0x26, 0xcb, 0xb2, 0xce,
		0xf6, 0xb1, 0x12, 0xd4, 0x67, 0x41, 0x44, 0xc6,
		0xbe, 0x22, 0x65, 0x02, 0x14, 0x6f, 0x0a, 0x11,
		0xb2, 0xd1, 0x51, 0xef, 0x35, 0xc3, 0x1d, 0xf2,
		0xea, 0xfc, 0xd5, 0xb8, 0xda, 0xf9, 0xb4, 0xef,
		0x71, 0x69, 0xb0, 0x11, 0x15, 0x86, 0x68, 0xa5,
		0xd6, 0x32, 0xb4, 0xee, 0x01, 0x98, 0x3b, 0x4b,
		0xf6, 0x01, 0xe0, 0x54, 0x30, 0x4a, 0x5f, 0x24,
	}
	err := AlgorithmEC256.Valid(data, sig, []byte(testEC256PublicKey))
	require.Nil(t, err)
}

func TestEC384Valid(t *testing.T) {
	data := "data"
	sig := []byte{
		0x1f, 0x7d, 0x3a, 0xfc, 0xfe, 0x18, 0x81, 0x3f,
		0x5e, 0x98, 0x2b, 0x84, 0xdd, 0x5a, 0x63, 0xcd,
		0x39, 0x58, 0xdd, 0x9f, 0xf7, 0x95, 0x8c, 0xab,
		0x21, 0x5f, 0xdf, 0xdf, 0x86, 0x15, 0x23, 0x14,
		0x05, 0x8f, 0x05, 0x5f, 0x8f, 0x2d, 0x79, 0x61,
		0x9b, 0xc9, 0x45, 0xf8, 0x52, 0x33, 0xe6, 0x90,
		0xaf, 0xfa, 0xb8, 0xd0, 0xc7, 0x19, 0x3e, 0x35,
		0xb2, 0xb2, 0x7a, 0x63, 0xb1, 0x92, 0x37, 0xa4,
		0x09, 0x13, 0xfe, 0x3c, 0x37, 0x3d, 0x6b, 0xb9,
		0xf5, 0xd1, 0xc3, 0x85, 0x6f, 0xe4, 0x6a, 0x40,
		0x26, 0xe7, 0x1b, 0x5a, 0x78, 0x90, 0x13, 0x77,
		0xd3, 0x26, 0xfa, 0x29, 0xf8, 0xe0, 0xe0, 0x47,
	}
	err := AlgorithmEC384.Valid(data, sig, []byte(testEC384PublicKey))
	require.Nil(t, err)
}

func TestEC512Valid(t *testing.T) {
	data := "data"
	sig := []byte{
		0x00, 0xbe, 0x76, 0xe0, 0xdd, 0x1f, 0x4a, 0x13,
		0x6e, 0xdd, 0x4b, 0x54, 0xf1, 0x64, 0x73, 0x89,
		0x3d, 0xdc, 0xd3, 0x2e, 0xbc, 0xcb, 0x0d, 0x9d,
		0xd5, 0x6e, 0x9f, 0x8f, 0x4b, 0x7c, 0x4b, 0x4a,
		0x9a, 0x41, 0x58, 0x57, 0xca, 0x73, 0xc2, 0xd1,
		0x95, 0x9e, 0x10, 0x20, 0xaa, 0x82, 0xbe, 0x25,
		0x31, 0x23, 0x9c, 0x37, 0x46, 0xe7, 0xec, 0xc2,
		0x96, 0xb8, 0x15, 0x7d, 0x2c, 0x98, 0x4b, 0x81,
		0xf5, 0x89, 0x01, 0x54, 0xc8, 0xf2, 0x36, 0x29,
		0xdb, 0xfb, 0x1c, 0x26, 0xbe, 0x79, 0x42, 0xb8,
		0x39, 0x0f, 0x06, 0xe7, 0xf7, 0x02, 0xbd, 0xae,
		0x23, 0xcd, 0x5c, 0x4a, 0x6b, 0x6f, 0x20, 0x1c,
		0x58, 0x78, 0xee, 0x26, 0xbd, 0xb9, 0x2d, 0x20,
		0x54, 0x36, 0x1d, 0x73, 0x18, 0x6f, 0xb4, 0x68,
		0x9b, 0x63, 0x2c, 0xc0, 0x15, 0xa0, 0x69, 0xe5,
		0x22, 0x31, 0xef, 0x37, 0x0c, 0x2f, 0x60, 0x94,
		0x1f, 0xb3, 0x83, 0xa3,
	}
	err := AlgorithmEC512.Valid(data, sig, []byte(testEC512PublicKey))
	require.Nil(t, err)
}

func TestECDSAValid(t *testing.T) {
	TestEC256Valid(t)
	TestEC384Valid(t)
	TestEC512Valid(t)
}

func TestEC256Name(t *testing.T) {
	expected := AlgorithmEC256.name
	actual := AlgorithmEC256.Name()
	require.Equal(t, expected, actual)
}

func TestEC384Name(t *testing.T) {
	expected := AlgorithmEC384.name
	actual := AlgorithmEC384.Name()
	require.Equal(t, expected, actual)
}

func TestEC512Name(t *testing.T) {
	expected := AlgorithmEC512.name
	actual := AlgorithmEC512.Name()
	require.Equal(t, expected, actual)
}

func TestECDSAName(t *testing.T) {
	TestEC256Name(t)
	TestEC384Name(t)
	TestEC512Name(t)
}

func TestEC256ValidFromPrivateKey(t *testing.T) {
	data := "data"
	sig := []byte{
		0x2b, 0xfd, 0x62, 0xfc, 0x0f, 0x13, 0x88, 0x6b,
		0x9f, 0x7e, 0x12, 0x3a, 0xd2, 0xcf, 0x54, 0xf4,
		0xd8, 0x4e, 0x84, 0x42, 0x7c, 0xf6, 0x80, 0x31,
		0x44, 0x97, 0x6b, 0x9c, 0xf2, 0xcc, 0xd5, 0x13,
		0x37, 0x27, 0x6c, 0x10, 0xfc, 0x90, 0x64, 0x88,
		0x4b, 0x1f, 0xe7, 0xa3, 0xb9, 0x0f, 0x6a, 0xa9,
		0x25, 0x5d, 0x74, 0xc4, 0xb2, 0xca, 0x9f, 0x60,
		0xd7, 0x42, 0x94, 0xfd, 0xa5, 0xc7, 0x9c, 0xa9,
	}
	err := AlgorithmEC256.ValidFromPrivateKey(data, sig, []byte(testEC256PrivateKey))
	require.Nil(t, err)
}

func TestEC384ValidFromPrivateKey(t *testing.T) {
	data := "data"
	sig := []byte{
		0x61, 0x5e, 0x20, 0xb2, 0x72, 0xc9, 0x7b, 0x42,
		0xc3, 0x3d, 0xf0, 0xe4, 0x6a, 0x75, 0xc0, 0x40,
		0x40, 0x2a, 0xb2, 0x3c, 0x21, 0xa1, 0xcf, 0xe5,
		0x44, 0x55, 0x76, 0x56, 0x27, 0xf0, 0xe7, 0xfa,
		0x03, 0x96, 0xb9, 0xe9, 0x29, 0xb1, 0xfd, 0x3b,
		0xf5, 0x5c, 0xd4, 0x70, 0xe4, 0xbb, 0xd3, 0xf7,
		0x8f, 0x9b, 0xc7, 0x7b, 0xa9, 0x8a, 0x52, 0x63,
		0x3a, 0xc6, 0x51, 0xe4, 0x19, 0xb6, 0x25, 0x68,
		0x06, 0x61, 0xb0, 0xb1, 0xdd, 0xb6, 0xaf, 0xa2,
		0xe7, 0x15, 0x1d, 0xf7, 0x72, 0x98, 0xd9, 0x07,
		0x15, 0xc1, 0x83, 0xd0, 0x26, 0x22, 0x53, 0xfa,
		0xc6, 0x63, 0x83, 0x09, 0xdc, 0x25, 0x48, 0x3a,
	}
	err := AlgorithmEC384.ValidFromPrivateKey(data, sig, []byte(testEC384PrivateKey))
	require.Nil(t, err)
}

func TestEC512ValidFromPrivateKey(t *testing.T) {
	data := "data"
	sig := []byte{
		0x00, 0xb1, 0x50, 0xf5, 0x85, 0xe5, 0x71, 0x75,
		0x73, 0xd4, 0x2c, 0x82, 0x7f, 0xb4, 0x63, 0xaf,
		0xf4, 0xac, 0x2a, 0x8f, 0xed, 0xff, 0x0d, 0xc1,
		0x14, 0x1d, 0x90, 0x73, 0x85, 0xe8, 0x37, 0x94,
		0xff, 0xb4, 0x28, 0x2a, 0x5f, 0x15, 0x4b, 0x72,
		0xd4, 0x88, 0x17, 0x41, 0xca, 0x54, 0x30, 0xdc,
		0xc8, 0x8b, 0xa5, 0x9a, 0xbb, 0xb1, 0x24, 0x90,
		0x3d, 0x40, 0x63, 0x7f, 0xc6, 0x87, 0xe1, 0x51,
		0xfd, 0x04, 0x01, 0xc1, 0x1f, 0xaf, 0x0d, 0x6c,
		0xe0, 0xc2, 0xbf, 0xea, 0x0d, 0x2b, 0x5c, 0x01,
		0xca, 0x6a, 0xf2, 0xc5, 0xec, 0xde, 0x95, 0xfc,
		0x19, 0x95, 0x75, 0x1f, 0x01, 0x10, 0xae, 0x5a,
		0xef, 0x5e, 0x59, 0x38, 0xa9, 0xf9, 0x9b, 0xf9,
		0x79, 0xbe, 0x34, 0x48, 0x80, 0x62, 0x55, 0x9b,
		0xe8, 0xbb, 0x87, 0xdd, 0x43, 0xba, 0x2c, 0xbd,
		0x0f, 0xa0, 0x4c, 0x0d, 0xff, 0xaa, 0x70, 0xf2,
		0x0a, 0xda, 0xae, 0xc2,
	}
	err := AlgorithmEC512.ValidFromPrivateKey(data, sig, []byte(testEC512PrivateKey))
	require.Nil(t, err)
}

func TestECDSAValidFromPrivateKey(t *testing.T) {
	TestEC256ValidFromPrivateKey(t)
	TestEC384ValidFromPrivateKey(t)
	TestEC512ValidFromPrivateKey(t)
}

func TestEC256PrivateKey(t *testing.T) {
	k, err := AlgorithmEC256.PrivateKey([]byte(testEC256PrivateKey))
	require.Nil(t, err)
	expected, err := AlgorithmEC256.PublicKey([]byte(testEC256PublicKey))
	require.Nil(t, err)
	actual := k.Public()
	require.Equal(t, expected, actual)
}

func TestEC384PrivateKey(t *testing.T) {
	k, err := AlgorithmEC384.PrivateKey([]byte(testEC384PrivateKey))
	require.Nil(t, err)
	expected, err := AlgorithmEC384.PublicKey([]byte(testEC384PublicKey))
	require.Nil(t, err)
	actual := k.Public()
	require.Equal(t, expected, actual)
}

func TestEC512PrivateKey(t *testing.T) {
	k, err := AlgorithmEC512.PrivateKey([]byte(testEC512PrivateKey))
	require.Nil(t, err)
	expected, err := AlgorithmEC512.PublicKey([]byte(testEC512PublicKey))
	require.Nil(t, err)
	actual := k.Public()
	require.Equal(t, expected, actual)
}

func TestECDSAPrivateKey(t *testing.T) {
	TestEC256PrivateKey(t)
	TestEC384PrivateKey(t)
	TestEC512PrivateKey(t)
}

func TestEC256PublicKey(t *testing.T) {
	k, err := AlgorithmEC256.PublicKey([]byte(testEC256PublicKey))
	require.Nil(t, err)
	require.Equal(t, elliptic.P256(), k.Curve)
}

func TestEC384PublicKey(t *testing.T) {
	k, err := AlgorithmEC384.PublicKey([]byte(testEC384PublicKey))
	require.Nil(t, err)
	require.Equal(t, elliptic.P384(), k.Curve)
}

func TestEC512PublicKey(t *testing.T) {
	k, err := AlgorithmEC512.PublicKey([]byte(testEC512PublicKey))
	require.Nil(t, err)
	require.Equal(t, elliptic.P521(), k.Curve)
}

func TestECDSAPublicKey(t *testing.T) {
	TestEC256PublicKey(t)
	TestEC384PublicKey(t)
	TestEC512PublicKey(t)
}
